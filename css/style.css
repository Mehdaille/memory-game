main {
  margin: 10vh auto;
  padding: 10vh auto;
  height: 80vh;
  width: 80vw;
  font-family: Arial, Helvetica, sans-serif;
  background-color: aqua;
  border-radius: 5%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: baseline;
}
nav {
  background-color: red;
  width: 100%;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: space-around;
  margin-bottom: 5vh;
}
ul {
  list-style-type: none;
}
ul li {
  display: contents;
  margin-left: 2vw;
  margin-right: 2vw;
}

section {
  width: 50vw;
  height: 60vh;
  background-color: rgba(65, 168, 44, 0.527);
  border-radius: 5%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: baseline;
  margin-bottom: 5%;
}
#memory{
  height: 40vh;
  width: 35vw;
}
input, button{
  margin: 1vh;
  border: #000000 solid 2px;
  height: 5vh;
  width: 45vw;
  background-color: rgba(140, 210, 126, 0.527);
}
.container{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  height: 100vh;
  display: flex;
  background: #060ab2;
}

.memory-game {
  padding: 1%;
  margin: 5%;
  display: flex;
  flex-wrap: wrap;
  align-content: space space-around;
  justify-content: center;
  perspective: 2000px;
}

.memory-card {
  width: calc(25% - 1vw);
  height: calc(33.333% - 3vh);
  margin: 1%;
  position: relative;
  transform: scale(1);
  transform-style: preserve-3d;
  transition: transform 1s;
  box-shadow: 0.5vw 0.5vw 0.5vw 0.1vw rgb(255, 255, 255);
  border-radius: 10%;
}

.memory-card:active {
  transform: scale(0.5);
  transition: transform 1s;
}
.back-face:hover {
  background-color: crimson;
}
.memory-card.flip {
  transform: rotateY(180deg);
  transition: transform 1s;
}

.front-face,
.back-face {
  width: 100%;
  height: 100%;
  padding: 1%;
  position: absolute;
  border-radius: 10%;
  background: #00ff4c;
  backface-visibility: hidden;
}

.front-face {
  transform: rotateY(180deg);
}
.end {
  visibility: hidden;
  opacity: 0;
  transition: visibility 0.5s ease-in-out, opacity 0.5s ease-in-out;
}

.blackout {
  visibility: hidden;
  opacity: 0;
  transition: visibility 0.5s ease-in-out, opacity 0.5s ease-in-out;
   
}
/* const cards = document.querySelectorAll(".memory-card");

let hasFlippedCard = false;
let lockBoard = false;
let firstCard, secondCard;

function flipCard() {
  if (lockBoard) return;
  if (this === firstCard) return;

  this.classList.add("flip");

  if (!hasFlippedCard) {
    hasFlippedCard = true;
    firstCard = this;
    console.log(firstCard.dataset.framework);

    return;
  }

  secondCard = this;
  console.log(secondCard.dataset.framework);
  checkForMatch();
}

function checkForMatch() {
  let isMatch = firstCard.dataset.framework === secondCard.dataset.framework;

  if (isMatch) {
    disableCards();
  } else {
    unflipCards();
  }
}

function disableCards() {
  firstCard.classList.add("end");
  secondCard.classList.add("end");
  firstCard.removeEventListener("click", flipCard);
  secondCard.removeEventListener("click", flipCard);

  resetBoard();
}

function unflipCards() {
  lockBoard = true;

  setTimeout(() => {
    firstCard.classList.remove("flip");
    secondCard.classList.remove("flip");

    resetBoard();
  }, 1500);
}

function resetBoard() {
  [hasFlippedCard, lockBoard] = [false, false];
  [firstCard, secondCard] = [null, null];
}

(function shuffle() {
  cards.forEach((card) => {
    let randomPos = Math.floor(Math.random() * 12);
    card.style.order = randomPos;
  });
})();

cards.forEach((card) => card.addEventListener("click", flipCard)); */
